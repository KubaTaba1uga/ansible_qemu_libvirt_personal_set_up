---
- hosts: all
  become: yes
  vars:
    vm_name: debian
    user: taba1uga
    disk_size: 30
    ram_size: 2048
    cpu_cores: 2
    autostart: false
    network: priv0br
    configuration_script: debian-12-cloud-init.yaml
    disk_url: https://cdimage.debian.org/cdimage/cloud/bookworm/daily/20240119-1631/debian-12-generic-amd64-daily-20240119-1631.qcow2

  tasks:
    - name: Ensure VM's disk is ready.
      block:
        - name: Gather facts about storage pools
          community.libvirt.virt_pool:
            command: facts

        - name: Build VM's disk.
          block:
            - set_fact:
                image: "{{ vm_name }}.qcow2"
                disk_size_in_gb: "{{ disk_size }}G"
                public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICs4UJCWbQaX84vgFQcafh6WOcx8zsoKlkzp89zuQKXI cardno:000F 7F1E3E3A"

            - name: Copy VM's configuration script.
              template:
                src: "./templates/{{ configuration_script }}"
                dest: "/tmp/{{ configuration_script }}"
                mode: '0777'

            - name: Create VM's disk.
              when: image not in ansible_libvirt_pools.images.volumes
              block:
                - name: Download base VM's disk.
                  get_url:
                    url: "{{ disk_url }}"
                    dest: /tmp/{{ image }}

                - name: Create VM's disk.
                  command: qemu-img resize -f qcow2 /tmp/{{ image }} {{ disk_size_in_gb }}

                - name: Copy VM's disk.
                  copy:
                    src: /tmp/{{ image }}
                    dest: /VMs/images/{{ image }}

        - name: Refresh storage pool.
          community.libvirt.virt_pool:
            command: refresh
            name: images

    - name: Ensure VM is created.
      block:
        - name: List all VMs.
          community.libvirt.virt:
            command: list_vms
          register: all_vms

        - name: Create VM.
          when: vm_name not in all_vms.list_vms
          command: virt-install -n {{ vm_name }}
                                --ram {{ ram_size }}
                                --vcpus {{ cpu_cores }}
                                --os-variant linux2022
                                --network bridge={{ network }}
                                --graphics vnc
                                --hvm
                                --virt-type kvm
                                --disk vol=images/{{ image }},bus=virtio
                                --import
                                --cloud-init disable=on,user-data=/tmp/{{ configuration_script }}
                                --noautoconsole
                                
          register: vm

        - name: Ensure VM's booting on startup is configured.
          community.libvirt.virt:
            name: "{{ vm_name }}"
            autostart: "{{ autostart }}"
          
        - name: Ensure VM is up.
          community.libvirt.virt:
            name: "{{ vm_name }}"
            state: running

    - name: Ensure VM networking is working.
      block:            
        - name: Test VM's ICMP connectivity.
          command: bash -c "for i in `seq 1 60`; do date ; sleep 5 ; ping -c3 {{ vm_name }}.lab &>/dev/null && break ; done"
          register: ping_result
          failed_when: ping_result.rc != 0          

        - name: Test VM's SSH connectivity.
          command: bash -c "for i in `seq 1 60`; do date ; sleep 5 ; nc -vzw 2 {{ vm_name }}.lab 22 &>/dev/null && break ; done"
          register: ssh_result
          failed_when: ssh_result.rc != 0          
          
    
